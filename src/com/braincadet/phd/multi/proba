            for (int j = 0; j < mm._pcws0.length; j++) {
                xj = xi + mm._p[j][0];
                yj = yi + mm._p[j][1];
                zj = zi + mm._p[j][2];
                ii = zj*(N*M)+yj*N+xj;

                mm._pcws[j] = (xj>=0 && xj<N && yj>=0 && yj<M && zj>=0 && zj<P)? tness[ii] : 0;

                if (mm._pcws[j]<tmin) tmin = mm._pcws[j];
                if (mm._pcws[j]>tmax) tmax = mm._pcws[j];

            }

            for (int j = 0; j < mm._pcws.length; j++) {

                mm._pcws[j] = (tmax-tmin> Float.MIN_VALUE)? ((mm._pcws[j]-tmin)/(tmax-tmin)) : 0 ;
                mm._pcws[j] = (float) (Math.pow(mm._pcws[j],weight_deg) * mm._w0[j]); //
                mm._pcws[j] = ((j==0)? mm._pcws[j] : (mm._pcws[j]+mm._pcws[j-1]));

            }

            if (mm._pcws[mm._pcws.length-1]<=Float.MIN_VALUE) {IJ.log("Xk["+i+"] had wmass "+mm._pcws[mm._pcws.length-1]); continue;}

            float wmass = mm._pcws[mm._pcws.length-1];
            float u1 = (wmass/ni)  * rndgen.nextFloat();

            int s = 0;

            ArrayList<X> xpick = new ArrayList<X>();

            for (int j = 0; j < ni; j++) {

                float uj = u1 + j * (wmass/ni);

                while (uj>mm._pcws[s] && s<mm._pcws.length-1) s++;

                // add s-th
                xj = xi + mm._p[s][0];
                yj = yi + mm._p[s][1];
                zj = zi + mm._p[s][2];

                if (xj>=0 && xj<N && yj>=0 && yj<M && zj>=0 && zj<P) {

                    ii = zj*(N*M)+yj*N+xj;

                    tnessval = tness[ii];

                    if (suppmap[ii]==0) { // finally select those that were not suppressed (that don't overlap with previous predictions)
                        particle = new X(xj,yj,zj,   mm._u[s][0],mm._u[s][1],mm._u[s][2],    99, tnessval);// 1,1,
                        particle.tag = xp.tag;
                        xpick.add(particle);
                    }

                }

            }

// add once it is clear how many there are
for (int j = 0; j < xpick.size(); j++) {
    xpick.get(j).w = pS * xp.w * (1f/xpick.size());
    XPk.add(xpick.get(j));
    if (XPk_cws.size()==0)  XPk_cws.add(xpick.get(j).w);
    else                    XPk_cws.add(xpick.get(j).w + XPk_cws.get(XPk_cws.size()-1));
}

